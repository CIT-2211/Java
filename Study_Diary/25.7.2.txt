2025年7月2日 晴
今天主要学习了软件工程的工作流程。
如果把Programmer比作poet，那么software就是hall。
Software is not the same as writing more code。
而software主要解决的问题是:Why?What?How to do?How to fix it?的问题。
Real-world problems:
1、数据庞大、多人协作开发
2、频繁的变更需求
3、软件的可靠性、长期性、高效性的考察（time、money）
=>工程的概念，即从个人艺术转型为严谨工程，就像土木工程里面的桥梁、汽车工程里面的零件
software的开发流程:
a、瀑布开发（最老套的开发流程）
需求分析=>设计蓝图=>实现编程=>软件测试=>部署运维（监察状态、维护环境、添加需求）
优点:计划性强，专一性强。	
缺点:不灵活，一旦需求发生改变可能推倒重来。
b、迭代式开发：
大工程=>多个小工程=>每个采用瀑布式开发
优点：相比较瀑布式开发，迭代式开发更灵活，快速看到成效。
缺点：分支很多，管理起来很复杂。
c、敏捷式开发
最小发行本（交付客户第一个小功能，满足客户基础需求），快速交付，持续性反馈
取消一次性交付，拥抱客户让客户参与其中（if:客户需求>成本,else:po取消将其ps）
优点：相较于a、b两种开发方式，敏捷式开发更加灵活，快速响应变化，持续交付用户价值。
缺点：团队配合要紧密，客户积极性要高，成员专业性要强。

团队配合常见工具箱：
A、版本控制系统:（Git、GitHub、GitLab）
B、集成开发工具:IDE
C、自动化流程及其部署:加快产品出产、提高效率
D、Jira Trello Confluence
E、UML
现阶段学习流程：
至少精通一门语言，多刷题=>体验开发流程（参与GitHub上面开源项目）=>

学完基础后做什么？
后端开发：学 Spring Boot（最流行的 Java 框架）。
安卓开发：学 Android Studio + Kotlin（Java 的“现代版”）。
大数据：学 Hadoop、Spark（Java 是大数据生态的基石）。
做个作品集：
把练习项目放到 GitHub 上，写清晰的 README（这是你的“编程简历”）。
尝试协作：
参与开源项目（从修复小 Bug 开始），体验团队开发流程。